{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matia\\\\OneDrive\\\\Escritorio\\\\PI-Videogames-main\\\\PI-Videogames-main\\\\client\\\\src\\\\components\\\\Home.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import { useState, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//     getVideogames,\n//     filterByGenres,\n//     getGenres,\n//     filterCreated,\n//     orderByRating,\n//     sortAlphabetically,\n//     orderByName,\n//     sortByRating,\n// } from \"../redux/actions\"\n// import { Link } from \"react-router-dom\";\n// import Card from \"./Card\";\n// import Paginado from \"./Paginado\";\n// import SearchBar from \"./SearchBar\";\n// import Loading from \"./Loading\";\n// import NotFound from \"./NotFound\";\n// //IMPORTAR ESTILOS\n\n// export default function Home() {\n//   const dispatch = useDispatch();\n//   const allVideogames = useSelector((state) => state.videogames);\n//   const allgenres = useSelector((state) => state.allgenres);\n//   const [loading, setLoading] = useState(true);\n//   const [header, setHeader] = useState(\"Explore all the Games\");\n//   const [order, setOrder] = useState(\"\");\n//   const [setOrdenRating] = useState(\"\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [videogamePerPage] = useState(15);\n//   const indexOfLastVideogame = currentPage * videogamePerPage;\n//   const indexOfFirtsVideogame = indexOfLastVideogame - videogamePerPage;\n//   const currentVideogame = allVideogames.slice(\n//     indexOfFirtsVideogame,\n//     indexOfLastVideogame\n//   );\n\n//   useEffect(() => {\n//     if(allVideogames.length > 0 ){\n//       setLoading(!loading)\n//     }\n//   }, [allVideogames, loading]) \n\n//   const paginado = (pageNumber) => {\n//     setCurrentPage(pageNumber);\n//   };\n\n//   if (allVideogames.length > 0 && loading) {\n//     setLoading(false);\n//   }\n\n//   useEffect(() => {\n//     dispatch(getVideogames());\n//     dispatch(getGenres());\n//   }, [dispatch]);\n\n//   function handleClick(element) {\n//     element.preventDefault();\n//     dispatch(getVideogames());\n//   }\n\n//   function handlePrev(element) {\n//     element.preventDefault();\n//     setCurrentPage(currentPage - 1);\n//   }\n\n//   function handleNext(element) {\n//     element.preventDefault();\n//     setCurrentPage(currentPage + 1);\n//   }\n\n//   function handleFilterGenres(element) {\n//     dispatch(filterByGenres(element.target.value));\n//     setCurrentPage(1);\n//   }\n//   function handleFilterCreated(element) {\n//     element.preventDefault();\n//     dispatch(filterCreated(element.target.value)); //PARA CREAR UN NUEVO JUEGO\n//   }\n//   function handleRatingSort(e) {\n//     e.preventDefault();\n//     dispatch(sortByRating(e.target.value));\n//     setCurrentPage(1);\n//     setOrder(`Sorted by: ${e.target.value}`);\n//     setHeader(`Sorted by: ${e.target.value}`);\n//   }\n// //ERROR EN CONSOLA A VERIFICAR\n//   function handleSort(element) {\n//     element.preventDefault();\n//     dispatch(sortAlphabetically(element.target.value));\n//     setCurrentPage(1);\n//     setOrder(`Sorted by: ${element.target.value}`);\n//     setHeader(`Sorted by: ${element.target.value}`);\n//   }\n//   return (\n//     <div id=\"HomeGeneral\" >\n//       <h1>Mattger GAMES</h1>\n//       <h1 id=\"titulo\">Elige tu juego!</h1>\n//       <Link to=\"/videogames\">\n//         <button id=\"btnCrear\">Crear juego nuevo</button>\n//       </Link>\n//       <button onClick={element => {handleClick(element)}}>\n//         Recargar juegos\n//       </button>\n//       <div>\n//         <SearchBar />\n//         <div onChange={(element) => handleFilterGenres(element)}>\n//           <select>\n//             <option value=\"todos\">Todos los géneros</option>\n//             {allgenres?.map((element) => {\n//               return (\n//                 <option key={element.id} value={element.value}>\n//                   {element.name}\n//                 </option>\n//               );\n//             })}\n//           </select>\n//         </div>\n//         <select onChange={(element) => handleSort(element)}>\n//           <option>Orden </option>\n//           <option value=\"asc\">Ascendente </option>\n//           <option value=\"desc\">Descendente</option>\n//         </select>\n//         <select\n//           onChange={(element) => handleRatingSort(element)}>\n//           <option value=\"rating\">Select Rating</option>\n//           <option value=\"least\">Menos Popular</option>\n//           <option value=\"more\">Más Popular</option>\n//         </select>\n//         <select id=\"select\" onChange={(e) => handleFilterCreated(e)}>\n//           <option value=\"All\">Todos los videos juegos</option>\n//           <option value=\"existente\">Existente</option>\n//           <option value=\"creados\">Creados</option>\n//         </select>\n\n//             { allVideogames?.map((element) =>{\n//               return (\n//                 <fragment className=\"juegos\">\n//                   <Link to={\"/home\" + element.id}>\n//                 <Card\n//                   key={element.id}\n//                   id={element.id}\n//                   name={element.name}\n//                   image={\n//                     element.image ? element.image : element.background_image\n//                   }\n//                   genres={element.genres}\n//                   rating={element.rating}\n//                   platforms={element.platforms}\n//                   released={element.released}\n//                   description={element.description}\n//                 />\n//                 </Link>\n//               </fragment>\n//               );\n//             })}\n\n//         <Paginado\n//           videogamePerPage={videogamePerPage}\n//           allVideogames={allVideogames.length}\n//           paginado={paginado}\n//           currentPage={currentPage}\n//         />\n//         <button\n//           id=\"pag\"\n//           onClick={(element) => handlePrev(element)}\n//           disabled={currentPage <= 1}\n//         >\n//           {\" \"}\n//           Prev{\" \"}\n//         </button>\n\n//         <button\n//           id=\"pag\"\n//           onClick={(element) => handleNext(element)}\n//           disabled={currentVideogame.length < 15}\n//         >\n//           {\" \"}\n//           Next{\" \"}\n//         </button>\n//       </div>\n//     </div> \n//   )}\n//-----------------------------------------------------------------------------------------------------\n// import React from \"react\";\n// import { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getVideogames, filterVideogamesBySatatus } from \"../redux/actions\";\n// import { Link } from 'react-router-dom';\n// import Card from \"./Card\";\n// import Paginado from \"./Paginado\";\n\n// export default function Home (){\n\n// const dispatch = useDispatch()\n// const allVideogames = useSelector ((state) => state.allVideogames)\n// const [currentPage, setCurrentPage] = useState(1)\n// const [videogamePerPage, setVideogamePerPage] = useState (20) //Controla cuántos videojugos se muestran por página\n// const indexOfLastVideogame = currentPage * videogamePerPage\n// const indexOfFirtsVideogame = indexOfLastVideogame - videogamePerPage\n// const currentVideogames = allVideogames.slice(indexOfFirtsVideogame, indexOfLastVideogame)\n\n// const paginado = (pageNumber) => {\n//   setCurrentPage(pageNumber)\n// }\n\n// useEffect (() => {\n//   dispatch(getVideogames());\n// },[dispatch])\n\n// function handleClick(element){\n//   element.preventDefault();\n//   dispatch(getVideogames());\n// }\n\n// function handleFilterStatus(e){\n//   dispatch(filterVideogamesBySatatus(e.target.value))\n// }\n\n// function handleFilterCreated{}\n\n// return (\n//   <div>\n//     <Link to='/videogames'>Crea tu videojuego</Link>\n//     <h1>Mattger GAMES</h1>\n//    <button onClick={element => {handleClick(element)}}>\n//     Recargar todos los juegos\n//     </button>\n//     <div>\n//       <select>\n//         <option value=\"asc\">Ascendente</option>\n//         <option value=\"desc\">Descendente</option>\n//       </select>\n//       <select>\n//         <option value=\"rating\">Select Rating</option>\n//         <option value=\"least\">Menos Popular</option>\n//         <option value=\"more\">Más Popular</option>\n//       </select>\n//       <select onChange={e => handleFilterStatus(e)}>\n//         <option value=\"All\">Todos los videos juegos</option>\n//         <option value=\"Existente\">Existentes</option>\n//         <option value=\"Creados\">Creados</option>\n//       </select>\n//       <Paginado\n//       videogamesPerPage={videogamePerPage}\n//       allVideogames={allVideogames.length}\n//       paginado = {paginado}\n//       />\n//       {currentVideogames?.map((videogame) => {\n//         return (\n//           <div>\n//             <Link to={\"/home/\" + videogame.id}>\n//               <Card  image={videogame.image}\n//                         name={videogame.name}\n//                         rating={videogame.rating}\n//                         genres={videogame.genres}/>\n//             </Link>\n//           </div>\n//         )\n//       })}\n//     </div>\n//     </div>\n\n// )\n// }\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAllVideogames, orderByName, orderByRating, filterCreated, getGenres, filterGenres } from \"../redux/actions/index\";\nimport Card from \"./Card\";\nimport Paginado from \"./Paginado\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"./SearchBar\";\nimport Loading from \"./Loading\";\n\n//useSelector = Hooks que funciona igual que el mapStateToProps;\n//useDispatch = Hooks que funciona igual que el mapdispatchToProps;\n//useEffect = Hooks que emula los ciclos de vida del componente(montaje, desmontaje y actualización);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const dispatch = useDispatch();\n  const allVideoGames = useSelector(state => state.allVideoGames); //state es el Est. Global que es un Obj y nos traemos solo la propiedad que vamos a utilizar.\n  // const { allVideoGames } = useSelector(state => state);\n  console.log(allVideoGames);\n\n  //Guardo los generos que voy a utilizar del estado global \n  const allGenres = useSelector(state => state.genres);\n\n  //Estado local para el ordenamiento\n  const [order, setOrder] = useState(\"\");\n\n  //Paginado:\n  //Defino varios estados locales\n  const [pageCurrent, setPageCurrent] = useState(1);\n\n  //Luego un estado de cuantos videogames quiero tener por pagina\n  const [gamesPerPage, setGamesPerPage] = useState(15);\n\n  //Declaro una const del ultimo videogames\n  const indexOfLastGames = pageCurrent * gamesPerPage; // =>>\n\n  //Declaro otra que va ser el indice del primer videogame\n  //que va a ser igual al indice del ultimo videogames menos los videogames por pagina\n  const indexOfFirstGames = indexOfLastGames - gamesPerPage;\n\n  //Creamos una nueva const que tendra los videogames de la pagina actual\n  const gamesCurrent = allVideoGames.slice(indexOfFirstGames, indexOfLastGames);\n\n  //Declaro un const paginado, que va a recibir como argumento un número de la pagina,\n  //y vamos a setear la pagina en ese numero de paginas\n  const paginado = numberPage => {\n    setPageCurrent(numberPage);\n  };\n\n  //-----------------------------------------------------//\n  const all = useSelector(state => state.copyAllVideoGames);\n  //Estado local para el loading\n  const [loading, setLoading] = useState(true); //==> Función inicial en false\n\n  if (allVideoGames.length > 0 && loading) {\n    setLoading(false);\n  }\n  //------------------------------------------------------//\n\n  //UseEffect = Recibe dos argumentos un callbacks y un array de dependencia\n  useEffect(() => {\n    dispatch(getAllVideogames());\n    dispatch(getGenres());\n  }, [dispatch]);\n  //console.log(allVideoGames);\n\n  //HandleClick nos reseteara de vuelta todo el estado de getAllVideoGames()\n  function handleClick(e) {\n    //console.log(e)\n    e.preventDefault();\n    dispatch(getAllVideogames());\n  }\n\n  //HandleSort despachara la action que nos llegue por e.target.value\n  function handleSort(e) {\n    //console.log(e.target.value);//==>>A-Z o Z-A\n    e.preventDefault();\n    dispatch(orderByName(e.target.value));\n    setPageCurrent(1); //Aqui cuando hago el ordenamiento seteame la pagina en la primera\n    setOrder(`Ordenado ${e.target.value}`); //Cuando seteo la pagina en 1, me va a modifique el estado local y me lo renderice\n  }\n\n  //Despacho el ordemaniemto por rating\n  function handleRatingSort(e) {\n    e.preventDefault();\n    dispatch(orderByRating(e.target.value));\n    setPageCurrent(1);\n    setOrder(`Ordenado ${e.target.value}`);\n  }\n\n  //Realizado el filtrado en el reducer, los despachamos\n  function handleFilterCreated(e) {\n    dispatch(filterCreated(e.target.value));\n  }\n\n  //Despacho los generos obtenidos\n  function handleGenres(e) {\n    //El e.preventDefault(), no lo vamos a necesitar en esta funcion\n    dispatch(filterGenres(e.target.value));\n    setOrder(`${e.target.value}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: all.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Online Games\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            handleClick(e);\n          },\n          children: \"Clean Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/createVideogames\",\n          children: \"Create Videogame\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleSort(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Order-Letter\",\n            children: \"Order by letter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"A-Z\",\n            children: \" A-Z \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Z-A\",\n            children: \" Z-A \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleRatingSort(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Order-Rating\",\n            children: \"Order by rating\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Men-May\",\n            children: \"Men-May\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"May-Men\",\n            children: \"May-Men\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleGenres(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"All\",\n            children: \"Genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 24\n          }, this), allGenres === null || allGenres === void 0 ? void 0 : allGenres.map(el => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: el.name,\n            children: el.name\n          }, el.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 49\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleFilterCreated(e),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"All\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Created\",\n            children: \"Created in DB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Existing\",\n            children: \"From the API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Paginado, {\n        gamesPerPage: gamesPerPage,\n        allVideoGames: allVideoGames.length,\n        paginado: paginado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          c: true,\n          children: gamesCurrent === null || gamesCurrent === void 0 ? void 0 : gamesCurrent.map(videogame => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: style.li,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/detail/${videogame.id}`,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  className: style.card,\n                  image: videogame.image,\n                  name: videogame.name,\n                  rating: videogame.rating,\n                  genres: videogame.genres\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 24\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 22\n              }, this)\n            }, videogame.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"iM3mUrFVgzrJrDeVZPZu1sSX3WY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","useDispatch","getAllVideogames","orderByName","orderByRating","filterCreated","getGenres","filterGenres","Card","Paginado","Link","SearchBar","Loading","jsxDEV","_jsxDEV","Home","_s","dispatch","allVideoGames","state","console","log","allGenres","genres","order","setOrder","pageCurrent","setPageCurrent","gamesPerPage","setGamesPerPage","indexOfLastGames","indexOfFirstGames","gamesCurrent","slice","paginado","numberPage","all","copyAllVideoGames","loading","setLoading","length","handleClick","e","preventDefault","handleSort","target","value","handleRatingSort","handleFilterCreated","handleGenres","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","onChange","map","el","name","id","c","videogame","className","style","li","card","image","rating","_c","$RefreshReg$"],"sources":["C:/Users/Matia/OneDrive/Escritorio/PI-Videogames-main/PI-Videogames-main/client/src/components/Home.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import { useState, useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//     getVideogames,\r\n//     filterByGenres,\r\n//     getGenres,\r\n//     filterCreated,\r\n//     orderByRating,\r\n//     sortAlphabetically,\r\n//     orderByName,\r\n//     sortByRating,\r\n// } from \"../redux/actions\"\r\n// import { Link } from \"react-router-dom\";\r\n// import Card from \"./Card\";\r\n// import Paginado from \"./Paginado\";\r\n// import SearchBar from \"./SearchBar\";\r\n// import Loading from \"./Loading\";\r\n// import NotFound from \"./NotFound\";\r\n// //IMPORTAR ESTILOS\r\n\r\n// export default function Home() {\r\n//   const dispatch = useDispatch();\r\n//   const allVideogames = useSelector((state) => state.videogames);\r\n//   const allgenres = useSelector((state) => state.allgenres);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [header, setHeader] = useState(\"Explore all the Games\");\r\n//   const [order, setOrder] = useState(\"\");\r\n//   const [setOrdenRating] = useState(\"\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [videogamePerPage] = useState(15);\r\n//   const indexOfLastVideogame = currentPage * videogamePerPage;\r\n//   const indexOfFirtsVideogame = indexOfLastVideogame - videogamePerPage;\r\n//   const currentVideogame = allVideogames.slice(\r\n//     indexOfFirtsVideogame,\r\n//     indexOfLastVideogame\r\n//   );\r\n\r\n  \r\n//   useEffect(() => {\r\n//     if(allVideogames.length > 0 ){\r\n//       setLoading(!loading)\r\n//     }\r\n//   }, [allVideogames, loading]) \r\n\r\n//   const paginado = (pageNumber) => {\r\n//     setCurrentPage(pageNumber);\r\n//   };\r\n\r\n//   if (allVideogames.length > 0 && loading) {\r\n//     setLoading(false);\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     dispatch(getVideogames());\r\n//     dispatch(getGenres());\r\n//   }, [dispatch]);\r\n\r\n//   function handleClick(element) {\r\n//     element.preventDefault();\r\n//     dispatch(getVideogames());\r\n//   }\r\n\r\n//   function handlePrev(element) {\r\n//     element.preventDefault();\r\n//     setCurrentPage(currentPage - 1);\r\n//   }\r\n\r\n//   function handleNext(element) {\r\n//     element.preventDefault();\r\n//     setCurrentPage(currentPage + 1);\r\n//   }\r\n\r\n//   function handleFilterGenres(element) {\r\n//     dispatch(filterByGenres(element.target.value));\r\n//     setCurrentPage(1);\r\n//   }\r\n//   function handleFilterCreated(element) {\r\n//     element.preventDefault();\r\n//     dispatch(filterCreated(element.target.value)); //PARA CREAR UN NUEVO JUEGO\r\n//   }\r\n//   function handleRatingSort(e) {\r\n//     e.preventDefault();\r\n//     dispatch(sortByRating(e.target.value));\r\n//     setCurrentPage(1);\r\n//     setOrder(`Sorted by: ${e.target.value}`);\r\n//     setHeader(`Sorted by: ${e.target.value}`);\r\n//   }\r\n// //ERROR EN CONSOLA A VERIFICAR\r\n//   function handleSort(element) {\r\n//     element.preventDefault();\r\n//     dispatch(sortAlphabetically(element.target.value));\r\n//     setCurrentPage(1);\r\n//     setOrder(`Sorted by: ${element.target.value}`);\r\n//     setHeader(`Sorted by: ${element.target.value}`);\r\n//   }\r\n//   return (\r\n//     <div id=\"HomeGeneral\" >\r\n//       <h1>Mattger GAMES</h1>\r\n//       <h1 id=\"titulo\">Elige tu juego!</h1>\r\n//       <Link to=\"/videogames\">\r\n//         <button id=\"btnCrear\">Crear juego nuevo</button>\r\n//       </Link>\r\n//       <button onClick={element => {handleClick(element)}}>\r\n//         Recargar juegos\r\n//       </button>\r\n//       <div>\r\n//         <SearchBar />\r\n//         <div onChange={(element) => handleFilterGenres(element)}>\r\n//           <select>\r\n//             <option value=\"todos\">Todos los géneros</option>\r\n//             {allgenres?.map((element) => {\r\n//               return (\r\n//                 <option key={element.id} value={element.value}>\r\n//                   {element.name}\r\n//                 </option>\r\n//               );\r\n//             })}\r\n//           </select>\r\n//         </div>\r\n//         <select onChange={(element) => handleSort(element)}>\r\n//           <option>Orden </option>\r\n//           <option value=\"asc\">Ascendente </option>\r\n//           <option value=\"desc\">Descendente</option>\r\n//         </select>\r\n//         <select\r\n//           onChange={(element) => handleRatingSort(element)}>\r\n//           <option value=\"rating\">Select Rating</option>\r\n//           <option value=\"least\">Menos Popular</option>\r\n//           <option value=\"more\">Más Popular</option>\r\n//         </select>\r\n//         <select id=\"select\" onChange={(e) => handleFilterCreated(e)}>\r\n//           <option value=\"All\">Todos los videos juegos</option>\r\n//           <option value=\"existente\">Existente</option>\r\n//           <option value=\"creados\">Creados</option>\r\n//         </select>\r\n\r\n//             { allVideogames?.map((element) =>{\r\n//               return (\r\n//                 <fragment className=\"juegos\">\r\n//                   <Link to={\"/home\" + element.id}>\r\n//                 <Card\r\n//                   key={element.id}\r\n//                   id={element.id}\r\n//                   name={element.name}\r\n//                   image={\r\n//                     element.image ? element.image : element.background_image\r\n//                   }\r\n//                   genres={element.genres}\r\n//                   rating={element.rating}\r\n//                   platforms={element.platforms}\r\n//                   released={element.released}\r\n//                   description={element.description}\r\n//                 />\r\n//                 </Link>\r\n//               </fragment>\r\n//               );\r\n//             })}\r\n\r\n//         <Paginado\r\n//           videogamePerPage={videogamePerPage}\r\n//           allVideogames={allVideogames.length}\r\n//           paginado={paginado}\r\n//           currentPage={currentPage}\r\n//         />\r\n//         <button\r\n//           id=\"pag\"\r\n//           onClick={(element) => handlePrev(element)}\r\n//           disabled={currentPage <= 1}\r\n//         >\r\n//           {\" \"}\r\n//           Prev{\" \"}\r\n//         </button>\r\n\r\n//         <button\r\n//           id=\"pag\"\r\n//           onClick={(element) => handleNext(element)}\r\n//           disabled={currentVideogame.length < 15}\r\n//         >\r\n//           {\" \"}\r\n//           Next{\" \"}\r\n//         </button>\r\n//       </div>\r\n//     </div> \r\n//   )}\r\n  //-----------------------------------------------------------------------------------------------------\r\n// import React from \"react\";\r\n// import { useState, useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { getVideogames, filterVideogamesBySatatus } from \"../redux/actions\";\r\n// import { Link } from 'react-router-dom';\r\n// import Card from \"./Card\";\r\n// import Paginado from \"./Paginado\";\r\n\r\n// export default function Home (){\r\n\r\n// const dispatch = useDispatch()\r\n// const allVideogames = useSelector ((state) => state.allVideogames)\r\n// const [currentPage, setCurrentPage] = useState(1)\r\n// const [videogamePerPage, setVideogamePerPage] = useState (20) //Controla cuántos videojugos se muestran por página\r\n// const indexOfLastVideogame = currentPage * videogamePerPage\r\n// const indexOfFirtsVideogame = indexOfLastVideogame - videogamePerPage\r\n// const currentVideogames = allVideogames.slice(indexOfFirtsVideogame, indexOfLastVideogame)\r\n\r\n// const paginado = (pageNumber) => {\r\n//   setCurrentPage(pageNumber)\r\n// }\r\n\r\n// useEffect (() => {\r\n//   dispatch(getVideogames());\r\n// },[dispatch])\r\n\r\n// function handleClick(element){\r\n//   element.preventDefault();\r\n//   dispatch(getVideogames());\r\n// }\r\n\r\n// function handleFilterStatus(e){\r\n//   dispatch(filterVideogamesBySatatus(e.target.value))\r\n// }\r\n\r\n// function handleFilterCreated{}\r\n\r\n// return (\r\n//   <div>\r\n//     <Link to='/videogames'>Crea tu videojuego</Link>\r\n//     <h1>Mattger GAMES</h1>\r\n//    <button onClick={element => {handleClick(element)}}>\r\n//     Recargar todos los juegos\r\n//     </button>\r\n//     <div>\r\n//       <select>\r\n//         <option value=\"asc\">Ascendente</option>\r\n//         <option value=\"desc\">Descendente</option>\r\n//       </select>\r\n//       <select>\r\n//         <option value=\"rating\">Select Rating</option>\r\n//         <option value=\"least\">Menos Popular</option>\r\n//         <option value=\"more\">Más Popular</option>\r\n//       </select>\r\n//       <select onChange={e => handleFilterStatus(e)}>\r\n//         <option value=\"All\">Todos los videos juegos</option>\r\n//         <option value=\"Existente\">Existentes</option>\r\n//         <option value=\"Creados\">Creados</option>\r\n//       </select>\r\n//       <Paginado\r\n//       videogamesPerPage={videogamePerPage}\r\n//       allVideogames={allVideogames.length}\r\n//       paginado = {paginado}\r\n//       />\r\n//       {currentVideogames?.map((videogame) => {\r\n//         return (\r\n//           <div>\r\n//             <Link to={\"/home/\" + videogame.id}>\r\n//               <Card  image={videogame.image}\r\n//                         name={videogame.name}\r\n//                         rating={videogame.rating}\r\n//                         genres={videogame.genres}/>\r\n//             </Link>\r\n//           </div>\r\n//         )\r\n//       })}\r\n//     </div>\r\n//     </div>\r\n\r\n    \r\n// )\r\n// }\r\n\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAllVideogames, orderByName, orderByRating, filterCreated, getGenres, filterGenres } from \"../redux/actions/index\"\r\nimport Card from \"./Card\";\r\nimport Paginado from \"./Paginado\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nimport Loading from \"./Loading\";\r\n\r\n//useSelector = Hooks que funciona igual que el mapStateToProps;\r\n//useDispatch = Hooks que funciona igual que el mapdispatchToProps;\r\n//useEffect = Hooks que emula los ciclos de vida del componente(montaje, desmontaje y actualización);\r\n\r\nexport default function Home () {\r\n    const dispatch = useDispatch();\r\n\r\n    const allVideoGames = useSelector((state) => state.allVideoGames);//state es el Est. Global que es un Obj y nos traemos solo la propiedad que vamos a utilizar.\r\n    // const { allVideoGames } = useSelector(state => state);\r\n    console.log(allVideoGames);\r\n\r\n    //Guardo los generos que voy a utilizar del estado global \r\n    const allGenres = useSelector((state) => state.genres);\r\n    \r\n    //Estado local para el ordenamiento\r\n    const [order, setOrder] = useState(\"\");\r\n\r\n    //Paginado:\r\n    //Defino varios estados locales\r\n    const [pageCurrent, setPageCurrent] = useState(1)\r\n\r\n    //Luego un estado de cuantos videogames quiero tener por pagina\r\n    const [gamesPerPage, setGamesPerPage] = useState(15)\r\n\r\n    //Declaro una const del ultimo videogames\r\n    const indexOfLastGames = pageCurrent * gamesPerPage // =>>\r\n\r\n    //Declaro otra que va ser el indice del primer videogame\r\n    //que va a ser igual al indice del ultimo videogames menos los videogames por pagina\r\n    const indexOfFirstGames = indexOfLastGames - gamesPerPage\r\n\r\n    //Creamos una nueva const que tendra los videogames de la pagina actual\r\n    const gamesCurrent = allVideoGames.slice(indexOfFirstGames, indexOfLastGames)\r\n\r\n    //Declaro un const paginado, que va a recibir como argumento un número de la pagina,\r\n    //y vamos a setear la pagina en ese numero de paginas\r\n    const paginado = (numberPage) => {\r\n        setPageCurrent(numberPage)\r\n      }\r\n\r\n    //-----------------------------------------------------//\r\n    const all = useSelector((state) => state.copyAllVideoGames);\r\n    //Estado local para el loading\r\n    const [loading, setLoading] = useState(true);//==> Función inicial en false\r\n\r\n    if(allVideoGames.length > 0 && loading){\r\n      setLoading(false)\r\n    }\r\n    //------------------------------------------------------//\r\n\r\n    //UseEffect = Recibe dos argumentos un callbacks y un array de dependencia\r\n    useEffect( () => {\r\n        dispatch(getAllVideogames());\r\n        dispatch(getGenres());\r\n    },[dispatch])\r\n    //console.log(allVideoGames);\r\n\r\n    //HandleClick nos reseteara de vuelta todo el estado de getAllVideoGames()\r\n     function handleClick(e){\r\n        //console.log(e)\r\n        e.preventDefault();\r\n        dispatch(getAllVideogames());\r\n     }\r\n\r\n     //HandleSort despachara la action que nos llegue por e.target.value\r\n     function handleSort(e){\r\n        //console.log(e.target.value);//==>>A-Z o Z-A\r\n        e.preventDefault();\r\n        dispatch(orderByName(e.target.value));\r\n        setPageCurrent(1);//Aqui cuando hago el ordenamiento seteame la pagina en la primera\r\n        setOrder(`Ordenado ${e.target.value}`);//Cuando seteo la pagina en 1, me va a modifique el estado local y me lo renderice\r\n     }\r\n\r\n     //Despacho el ordemaniemto por rating\r\n     function handleRatingSort(e){\r\n        e.preventDefault();\r\n        dispatch(orderByRating(e.target.value));\r\n        setPageCurrent(1);\r\n        setOrder(`Ordenado ${e.target.value}`);\r\n     }\r\n\r\n     //Realizado el filtrado en el reducer, los despachamos\r\n     function handleFilterCreated(e){\r\n        dispatch(filterCreated(e.target.value));\r\n     }\r\n\r\n     //Despacho los generos obtenidos\r\n     function handleGenres(e){\r\n        //El e.preventDefault(), no lo vamos a necesitar en esta funcion\r\n        dispatch(filterGenres(e.target.value));\r\n        setOrder(`${e.target.value}`);\r\n     }\r\n\r\n    return(\r\n        <div> \r\n                {all.length > 0 ? (<div>\r\n               <div >\r\n                 <h1>Online Games</h1>\r\n              </div>\r\n              <div>\r\n                  <button onClick={e => {handleClick(e)}} >\r\n                     Clean Page\r\n                  </button>\r\n                  <Link to='/createVideogames' >Create Videogame</Link>           \r\n              </div>\r\n                <div>\r\n                   <select onChange={e => handleSort(e)} >\r\n                      <option value=\"Order-Letter\">Order by letter</option>\r\n                      <option value=\"A-Z\"> A-Z </option>\r\n                      <option value=\"Z-A\"> Z-A </option>\r\n                    </select>\r\n                    <select onChange={e => handleRatingSort(e)} >\r\n                       <option value=\"Order-Rating\">Order by rating</option>\r\n                       <option value=\"Men-May\">Men-May</option>\r\n                       <option value=\"May-Men\">May-Men</option>\r\n                    </select>\r\n                    <select onChange={e => handleGenres(e)} >\r\n                       <option value=\"All\">Genres</option>\r\n                       {\r\n                          allGenres?.map(el => (<option key={el.id} value={el.name}>{el.name}</option>))\r\n                        }\r\n                    </select>\r\n                    <select onChange={e => handleFilterCreated(e)} >\r\n                       <option value=\"All\">All</option>\r\n                       <option value=\"Created\">Created in DB</option>\r\n                       <option value=\"Existing\">From the API</option>\r\n                    </select>\r\n                </div>        \r\n               <div>\r\n                <SearchBar/>\r\n               </div>\r\n               <Paginado\r\n               gamesPerPage={gamesPerPage}\r\n               allVideoGames={allVideoGames.length}\r\n               paginado={paginado}\r\n               />\r\n               <div >\r\n               <div c>\r\n               {\r\n               gamesCurrent?.map(videogame => {\r\n                 return (\r\n                  <li className={style.li} key={videogame.id}>\r\n                     <Link to={`/detail/${videogame.id}`}>\r\n                       <Card className={style.card}\r\n                        image={videogame.image}\r\n                        name={videogame.name}\r\n                        rating={videogame.rating}\r\n                        genres={videogame.genres}\r\n                        />\r\n                     </Link>\r\n                  </li>\r\n                )\r\n               })\r\n               }\r\n              </div>\r\n            </div>\r\n            </div>): <Loading/>}\r\n         </div>\r\n        )\r\n   }"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,SAAS,EAAEC,YAAY,QAAQ,wBAAwB;AAC7H,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,SAAS,MAAM,aAAa;AAEnC,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,IAAIA,CAAA,EAAI;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGhB,WAAW,EAAE;EAE9B,MAAMiB,aAAa,GAAGlB,WAAW,CAAEmB,KAAK,IAAKA,KAAK,CAACD,aAAa,CAAC,CAAC;EAClE;EACAE,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;;EAE1B;EACA,MAAMI,SAAS,GAAGtB,WAAW,CAAEmB,KAAK,IAAKA,KAAK,CAACI,MAAM,CAAC;;EAEtD;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAM+B,gBAAgB,GAAGJ,WAAW,GAAGE,YAAY,EAAC;;EAEpD;EACA;EACA,MAAMG,iBAAiB,GAAGD,gBAAgB,GAAGF,YAAY;;EAEzD;EACA,MAAMI,YAAY,GAAGd,aAAa,CAACe,KAAK,CAACF,iBAAiB,EAAED,gBAAgB,CAAC;;EAE7E;EACA;EACA,MAAMI,QAAQ,GAAIC,UAAU,IAAK;IAC7BR,cAAc,CAACQ,UAAU,CAAC;EAC5B,CAAC;;EAEH;EACA,MAAMC,GAAG,GAAGpC,WAAW,CAAEmB,KAAK,IAAKA,KAAK,CAACkB,iBAAiB,CAAC;EAC3D;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC,CAAC;;EAE7C,IAAGmB,aAAa,CAACsB,MAAM,GAAG,CAAC,IAAIF,OAAO,EAAC;IACrCC,UAAU,CAAC,KAAK,CAAC;EACnB;EACA;;EAEA;EACAzC,SAAS,CAAE,MAAM;IACbmB,QAAQ,CAACf,gBAAgB,EAAE,CAAC;IAC5Be,QAAQ,CAACX,SAAS,EAAE,CAAC;EACzB,CAAC,EAAC,CAACW,QAAQ,CAAC,CAAC;EACb;;EAEA;EACC,SAASwB,WAAWA,CAACC,CAAC,EAAC;IACpB;IACAA,CAAC,CAACC,cAAc,EAAE;IAClB1B,QAAQ,CAACf,gBAAgB,EAAE,CAAC;EAC/B;;EAEA;EACA,SAAS0C,UAAUA,CAACF,CAAC,EAAC;IACnB;IACAA,CAAC,CAACC,cAAc,EAAE;IAClB1B,QAAQ,CAACd,WAAW,CAACuC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;IACrCnB,cAAc,CAAC,CAAC,CAAC,CAAC;IAClBF,QAAQ,CAAE,YAAWiB,CAAC,CAACG,MAAM,CAACC,KAAM,EAAC,CAAC,CAAC;EAC1C;;EAEA;EACA,SAASC,gBAAgBA,CAACL,CAAC,EAAC;IACzBA,CAAC,CAACC,cAAc,EAAE;IAClB1B,QAAQ,CAACb,aAAa,CAACsC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;IACvCnB,cAAc,CAAC,CAAC,CAAC;IACjBF,QAAQ,CAAE,YAAWiB,CAAC,CAACG,MAAM,CAACC,KAAM,EAAC,CAAC;EACzC;;EAEA;EACA,SAASE,mBAAmBA,CAACN,CAAC,EAAC;IAC5BzB,QAAQ,CAACZ,aAAa,CAACqC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;EAC1C;;EAEA;EACA,SAASG,YAAYA,CAACP,CAAC,EAAC;IACrB;IACAzB,QAAQ,CAACV,YAAY,CAACmC,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;IACtCrB,QAAQ,CAAE,GAAEiB,CAAC,CAACG,MAAM,CAACC,KAAM,EAAC,CAAC;EAChC;EAED,oBACIhC,OAAA;IAAAoC,QAAA,EACSd,GAAG,CAACI,MAAM,GAAG,CAAC,gBAAI1B,OAAA;MAAAoC,QAAA,gBACpBpC,OAAA;QAAAoC,QAAA,eACEpC,OAAA;UAAAoC,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAK;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClB,eACNxC,OAAA;QAAAoC,QAAA,gBACIpC,OAAA;UAAQyC,OAAO,EAAEb,CAAC,IAAI;YAACD,WAAW,CAACC,CAAC,CAAC;UAAA,CAAE;UAAAQ,QAAA,EAAE;QAEzC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACTxC,OAAA,CAACJ,IAAI;UAAC8C,EAAE,EAAC,mBAAmB;UAAAN,QAAA,EAAE;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnD,eACJxC,OAAA;QAAAoC,QAAA,gBACGpC,OAAA;UAAQ2C,QAAQ,EAAEf,CAAC,IAAIE,UAAU,CAACF,CAAC,CAAE;UAAAQ,QAAA,gBAClCpC,OAAA;YAAQgC,KAAK,EAAC,cAAc;YAAAI,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACrDxC,OAAA;YAAQgC,KAAK,EAAC,KAAK;YAAAI,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eAClCxC,OAAA;YAAQgC,KAAK,EAAC,KAAK;YAAAI,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC3B,eACTxC,OAAA;UAAQ2C,QAAQ,EAAEf,CAAC,IAAIK,gBAAgB,CAACL,CAAC,CAAE;UAAAQ,QAAA,gBACxCpC,OAAA;YAAQgC,KAAK,EAAC,cAAc;YAAAI,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACrDxC,OAAA;YAAQgC,KAAK,EAAC,SAAS;YAAAI,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eACxCxC,OAAA;YAAQgC,KAAK,EAAC,SAAS;YAAAI,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAClC,eACTxC,OAAA;UAAQ2C,QAAQ,EAAEf,CAAC,IAAIO,YAAY,CAACP,CAAC,CAAE;UAAAQ,QAAA,gBACpCpC,OAAA;YAAQgC,KAAK,EAAC,KAAK;YAAAI,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,EAEhChC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEoC,GAAG,CAACC,EAAE,iBAAK7C,OAAA;YAAoBgC,KAAK,EAAEa,EAAE,CAACC,IAAK;YAAAV,QAAA,EAAES,EAAE,CAACC;UAAI,GAA/BD,EAAE,CAACE,EAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAqC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAE3E,eACTxC,OAAA;UAAQ2C,QAAQ,EAAEf,CAAC,IAAIM,mBAAmB,CAACN,CAAC,CAAE;UAAAQ,QAAA,gBAC3CpC,OAAA;YAAQgC,KAAK,EAAC,KAAK;YAAAI,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eAChCxC,OAAA;YAAQgC,KAAK,EAAC,SAAS;YAAAI,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS,eAC9CxC,OAAA;YAAQgC,KAAK,EAAC,UAAU;YAAAI,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAS;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACxC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACP,eACPxC,OAAA;QAAAoC,QAAA,eACCpC,OAAA,CAACH,SAAS;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACP,eACNxC,OAAA,CAACL,QAAQ;QACTmB,YAAY,EAAEA,YAAa;QAC3BV,aAAa,EAAEA,aAAa,CAACsB,MAAO;QACpCN,QAAQ,EAAEA;MAAS;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjB,eACFxC,OAAA;QAAAoC,QAAA,eACApC,OAAA;UAAKgD,CAAC;UAAAZ,QAAA,EAENlB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE0B,GAAG,CAACK,SAAS,IAAI;YAC7B,oBACCjD,OAAA;cAAIkD,SAAS,EAAEC,KAAK,CAACC,EAAG;cAAAhB,QAAA,eACrBpC,OAAA,CAACJ,IAAI;gBAAC8C,EAAE,EAAG,WAAUO,SAAS,CAACF,EAAG,EAAE;gBAAAX,QAAA,eAClCpC,OAAA,CAACN,IAAI;kBAACwD,SAAS,EAAEC,KAAK,CAACE,IAAK;kBAC3BC,KAAK,EAAEL,SAAS,CAACK,KAAM;kBACvBR,IAAI,EAAEG,SAAS,CAACH,IAAK;kBACrBS,MAAM,EAAEN,SAAS,CAACM,MAAO;kBACzB9C,MAAM,EAAEwC,SAAS,CAACxC;gBAAO;kBAAA4B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA;cACvB;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA;YACE,GARoBS,SAAS,CAACF,EAAE;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QASrC;UAER,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAEG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,gBAAGxC,OAAA,CAACF,OAAO;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChB;AAEZ;AAACtC,EAAA,CA3JoBD,IAAI;EAAA,QACPd,WAAW,EAEND,WAAW,EAKfA,WAAW,EA6BjBA,WAAW;AAAA;AAAAsE,EAAA,GArCHvD,IAAI;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}